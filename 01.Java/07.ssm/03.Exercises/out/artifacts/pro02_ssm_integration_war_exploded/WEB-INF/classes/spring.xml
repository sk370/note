<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
<!--    引入jdbc.properties-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
<!--    扫描组件，除控制层-->
    <context:component-scan base-package="iceriver.ssm.pro02">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
<!--    配置数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

<!--    配置事务管理器：基于注解方式-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
<!--    开启注解驱动-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

<!--    整合mybatis:-->
<!--    配置sqlsessionfactorybean，可以直接在spring的ioc中获取sqlsessionfactory对象  -->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
<!--        设置mybatis的核心配置文件路径，如果有这个设置，则允许spring.xml与mybatis-config.xml同时进行配置-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
<!--        设置数据源-->
        <property name="dataSource" ref="dataSource"/>
<!--        设置类型别名对应的包-->
        <property name="typeAliasesPackage" value="iceriver.ssm.pro02.pojo"/>
<!--        设置映射文件路径：如果映射文件与mapper类的包名一致时，可以不设置。注意，不设置时还需要设置下面的sqlsession实现类对象。不然还是要写-->
        <property name="mapperLocations" value="classpath:iceriver/ssm/pro02/mapper/*.xml"/>
    </bean>
<!--    配置mapper接口的扫描，可以将指定包下所有的mapper接口通过sqlsession创建代理实现类对象，并将这些对象交给ioc容器管理-->
<!--    有了这个配置，就可以直接在serviceimple类中直接使用ampper类了，而不用创建sqlsession对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="iceriver.ssm.pro02.mapper"/>
    </bean>
</beans>